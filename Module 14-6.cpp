/*6. Проход змейкой (дополнительное задание)
Есть двумерный массив целых чисел размером 5 на 5 элементов.
Его надо инициализировать и отобразить на экране.
Особенность именно в способе этой инициализации.
Элементы должны быть инициализированы не последовательно, а змейкой:
в конце каждой строки мы должны не переходить к первому элементу следующей строки, а начать наоборот,
с последнего элемента и так далее. В конечном отображении массива числа должны быть упорядочены по возрастанию,
но змеевидно от строке к строке. Сама же последовательность чисел — это простое линейное возрастание от 0 до 24,
для её учёта можно завести отдельную переменную.

Попытайтесь решить эту задачу используя минимальное количество временных переменных и без условных переходов if.
Если вы найдёте формулу индексации, будет замечательно! Она может быть весьма витиеватой..

Советы и рекомендации
Результирующий массив должен выглядеть так:

0 1 2 3 4 
9 8 7 6 5 
10 11 12 13 14 
19 18 17 16 15 
20 21 22 23 24

Внешний и внутренний циклы идут от 0 до 5, тут ничего нового.
Первый индекс (строка) тоже без сюрпризов: это значение счётчика внешнего цикла:

for (int i = 0; i < 5; ++i) { 
        for (int j = 0; j < 5; ++j) { 
            digits[i][...] = number; 
            number += 1; 
        } 
… 
    }

Самое сложное тут — это номер столбца.
Чтобы сначала двигаться слева направо, а на следующей строке наоборот, стоит завести переменную-множитель,
которая на чётных строках будет равна 1. На нечётных строках меняет знак: multiplier *= −1;*/

#include <iostream>

//размерность матрицы и вектора
const int n = 4;

int main() {
	float A[n][n];
	float B[n];
	float C[n];
	float r = 1.0;

	//инициализация и вывод матрицы А в консоль
	std::cout << "A" << std::endl;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			A[i][j] = 2.0f * (float)i;
			std::cout << A[i][j] << " ";
		}
		std::cout << std::endl;
	}

	//инициализация и вывод вектора B в консоль
	std::cout << "B" << std::endl;
	for (int i = 0; i < n; ++i) {
		B[i] = 1.0;
		std::cout << B[i] << " ";
	}
	std::cout << std::endl;


	//умножаем вектор на матрицу и выводим в консоль
	float summ = 0.0;
	std::cout << "C" << std::endl;
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			summ += A[i][j] * B[j];
		}
		C[i] = summ;
		std::cout << C[i] << " ";
		summ = 0.0;
	}
}